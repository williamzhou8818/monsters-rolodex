{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","pages/about.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","monster","id","name","email","CardList","monsters","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","About","_useState","useState","about_page_header_title","about_page_header_bg_image","about_page_section1","about_page_section3_img1","_useState2","Object","slicedToArray","about","setAbout","useEffect","fetch","then","response","json","data","width","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchField","_this2","users","setState","_this3","_this$state","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","react_router_dom","to","search_box_component_SearchBox","e","target","value","card_list_component_CardList","react_router","exact","path","component","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.04c20bcd.chunk.js","sourcesContent":["import  React from 'react';\nimport './card.style.css';\n\nexport const Card = (props) => (\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h1> { props.monster.name } </h1>\n        <p> { props.monster.email } </p>\n    </div>\n)","import React from 'react';\nimport { Card } from '../card/card.component';\n\nimport './card-list.style.css';\n\nexport const CardList =  props => (\n    <div className='card-list'>\n        { props.monsters.map(monster => (   \n            <Card key={monster.id}  monster={monster}/>\n         )) }\n    </div>\n);","import React from 'react';\n\nimport './search-box.style.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n        className='search'\n        type='search'\n        placeholder =  { placeholder }\n        onChange={handleChange}\n    />\n)","import React, {useEffect, useState} from 'react'\n\nconst About = () => {\n\n    const [about, setAbout] = useState({\n        about_page_header_title: '',\n        about_page_header_bg_image:'',\n        about_page_section1: '',\n        about_page_section3_img1: ''\n    })\n\n    useEffect(() => {\n        fetch('https://nkwapi.jbgcore.com:5000/api/about')\n        .then(response => response.json())\n          .then(data => setAbout(data[0]));\n    }, [])\n\n    return (\n        <div> \n         <h3>header title: {about.about_page_header_title} </h3>\n         <img src={about.about_page_header_bg_image} width='400px' alt=\"\"/>\n            \n        </div>\n    )\n}\n\nexport default About;","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { Route, Link, Switch} from 'react-router-dom';\n\nimport About from './pages/about';\n\nimport './App.css';\nclass App extends Component { \n  constructor() {\n\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n      fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n          .then(users => this.setState({ monsters: users }));\n      \n  }\n\n  render() {\n\n    const { monsters, searchField} =  this.state;\n    const  filteredMonsters = monsters.filter(monster => \n           monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())    \n      )\n    return (\n      <div className='App'>\n        <h1> Monsters Rolodex </h1>\n        <Link to='/about'>About</Link>\n        <SearchBox \n            placeholder='search monsters'\n            handleChange={e =>  this.setState({ searchField: e.target.value })}\n         />\n        <CardList monsters={filteredMonsters} />\n        <Switch>\n          <Route exact path=\"/about\" component={About} />\n        </Switch>\n      </div>\n    )\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n     <App />\n    </BrowserRouter>\n   , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}