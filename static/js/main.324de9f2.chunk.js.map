{"version":3,"sources":["components/scroll/scroll.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Scroll","props","react_default","a","createElement","style","overflow","border","height","children","Card","className","alt","src","concat","monster","id","name","email","CardList","monsters","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","this","onRequestRobots","_this$props","searchField","onSearchChange","filteredMonsters","robots","filter","toLowerCase","includes","toLocaleLowerCase","search_box_component_SearchBox","scroll_component","card_list_component_CardList","Component","connect","state","searchRobots","requestRobots","isPending","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","intialStateSearch","intialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","Object","objectSpread","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.324de9f2.chunk.js","sourcesContent":["import React from 'react';\n/// props\n/// stats\n/// chldren \nconst Scroll = (props) => {\n    return  ( \n        <div style={{overflow: 'scroll', border: '6px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import  React from 'react';\nimport './card.style.css';\n\nexport const Card = (props) => (\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h4> { props.monster.name } </h4>\n        <p> { props.monster.email } </p>\n    </div>\n)\n\n\n","import React from 'react';\nimport { Card } from '../card/card.component';\n\nimport './card-list.style.css';\n\nexport const CardList =  props => (\n    <div className='card-list'>\n        { props.monsters.map(monster => (   \n            <Card key={monster.id}  monster={monster}/>\n         )) }\n    </div>\n);","import React from 'react';\n\nimport './search-box.style.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n        className='search'\n        type='search'\n        placeholder =  { placeholder }\n        onChange={handleChange}\n    />\n)","import React, { Component } from 'react';\nimport  { connect } from 'react-redux';\n\nimport Scroll from './components/scroll/scroll.component';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport { setSearchField, requestRobots } from './actions'; // Redux import Actions\n\nimport './App.css';\n\nconst  mapStateToProps = state => {\n  return  {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return { \n        onSearchChange:  (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\n\nclass App extends Component { \n\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n      \n  }\n\n\n\n  render() {\n\n    const { searchField, onSearchChange, robots  } = this.props;\n    const  filteredMonsters = robots.filter(monster => \n           monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())    \n      )\n    return (\n      <div className='App'>\n        <h1> Monsters Rolodex </h1>\n        <SearchBox \n            placeholder='search monsters'\n            handleChange={onSearchChange}\n         />\n         <Scroll> \n         <CardList monsters={filteredMonsters} />\n         </Scroll>\n      </div>\n    )\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// Rudce Actions \nimport { \n        CHANGE_SEARCH_FIELD,\n        REQUEST_ROBOTS_PENDING,\n        REQUEST_ROBOTS_SUCCESS,\n        REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD, \n    payload: text  \n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload:data}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n\n\n","export const CHANGE_SEARCH_FIELD  = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'EQUEST_ROBOTS_PENDING';\n\nexport const REQUEST_ROBOTS_SUCCESS= 'EQUEST_ROBOTS_SUCCESS';\n\nexport const REQUEST_ROBOTS_FAILED = 'EQUEST_ROBOTS_FAILED';\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst intialStateSearch = {\n    searchField: '' \n}\nexport const searchRobots = (state=intialStateSearch, action={}) => {\n    switch(action.type) {\n        case  CHANGE_SEARCH_FIELD :\n         return  ({...state,  searchField: action.payload });\n        default: \n         return state;\n        \n    }\n}\n\nconst intialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\nexport const requestRobots = ( state=intialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return ({...state, isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return ({...state, robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return ({...state, error: action.payload, isPending: false})\n        default:\n            return state;\n\n    }\n            \n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers} from 'redux';\n\nimport { createLogger } from 'redux-logger';\nimport  thunkMiddleware  from  'redux-thunk';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { searchRobots, requestRobots } from './reducers'; \n\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\n\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware( thunkMiddleware,logger))  // big Javascript and display source tre,\n\nReactDOM.render(\n    <Provider store={store}>\n         <App  />\n    </Provider>, \n        document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}